File=Table 
Product=ubdl
Version=v2_me_06_03
 
Group:

Flavor     = ANY
Qualifiers = "e17:prof"

  Action = GetProducts
    setupRequired( root     v6_12_06a -q e17:prof )
    setupRequired( opencv   v3_1_0_nogui -q e17 )
    setupRequired( python   v2_7_14b )
    setupRequired( numpy    v1_14_3   -q e17:p2714b:openblas:prof )
    setupRequired( libtorch v1_0_1    -q e17:prof )     
    setupRequired( figcan   v0_0_4    -q e17:p2714b:prof )  
    setupRequired( pyzmq    v18_0_2   -q e17:p2714b:prof )  
    setupRequired( pyyaml   v3_12d    -q p2714b )
    setupRequired( scipy    v1_1_0    -q e17:p2714b:openblas:prof )
    setupRequired( boost    v1_66_0a  -q e17:prof )
    setupRequired( eigen    v3_3_4a    )

Flavor     = ANY
Qualifiers = "e17:prof"

  Action = GetProducts
    setupRequired( root     v6_28_12 -q e26:p3915:prof )
    setupRequired( python   v3_9_15 )    
    setupRequired( numpy    v1_24_3   -q e26:p3915 )
    setupRequired( boost    v1_82_0   -q e26:prof )    
    setupRequired( eigen    v3_3_4a    )
    setupRequired( libtorch v1_13_1b  -q e26 )    
    setupRequired( pyyaml   v6_0_2    -q e26:p3915:prof )    
    setupRequired( opencv   v3_4_16_nogui -q e26:p3915:prof )
    setupRequired( pyzmq    v19_0_2   -q e26:p3915:prof )  
    setupRequired( scipy    v1_11_4    -q e26:p3915:prof )    

Common:
  Action = setup
    prodDir()
    setupEnv()
    envSet(${UPS_PROD_NAME_UC}_VERSION, ${UPS_PROD_VERSION})

    # Set up required products, which is root
    exeActionRequired(GetProducts)

    # UBDL
    envSet(UBDL_BASEDIR,${UPS_PROD_DIR})

    # set key environment variables for sub-packages
    envSet(OPENCV_LIBDIR,${OPENCV_LIB})
    envSet(OPENCV_INCDIR,${OPENCV_INC})

    # larlite
    envSet(LARLITE_BASEDIR,${UPS_PROD_DIR}/larlite)
    envSet(LARLITE_COREDIR,${UPS_PROD_DIR}/larlite/core)
    envSet(LARLITE_LIBDIR, ${UPS_PROD_DIR}/larlite/build/installed/lib)
    envSet(LARLITE_INCDIR, ${UPS_PROD_DIR}/larlite/build/installed/include)
    envSet(LARLITE_USERDEVDIR,${UPS_PROD_DIR}/larlite/UserDev)
    envSet(LARLITE_PYTHON,"python3")
    envSet(LARLTTE_PYTHON_VERSION,3)

    # Geo2D
    envSet(GEO2D_BASEDIR,${UPS_PROD_DIR}/Geo2D)
    envSet(GEO2D_BINDIR, ${UPS_PROD_DIR}/Geo2D/bin)
    envSet(GEO2D_COREDIR,${UPS_PROD_DIR}/Geo2D/Geo2D/core)
    envSet(GEO2D_INCDIR, ${UPS_PROD_DIR}/Geo2D)
    envSet(GEO2D_LIBDIR, ${UPS_PROD_DIR}/Geo2D/lib)
    envSet(ENABLE_GEO2D_ALIAS,1)
    envSet(GEO2D_PYTHON,python3)
    envSet(GEO2D_PYTHON_VERSION,3)

    # LArOpenCV
    envSet(LAROPENCV_BASEDIR,${UPS_PROD_DIR}/LArOpenCV)
    envSet(LAROPENCV_IMAGECLUSTERDIR,${UPS_PROD_DIR}/LArOpenCV/ImageCluster)
    envSet(LAROPENCV_PYTHON,python3)
    envSet(LAROPENCV_PYTHON_VERSION,3)

    # LArCV
    envSet(LARCV_APPDIR,${UPS_PROD_DIR}/larcv/larcv/app)
    envSet(LARCV_BASEDIR,${UPS_PROD_DIR}/larcv)
    envSet(LARCV_BINDIR,${UPS_PROD_DIR}/larcv/build/installed/bin)
    envSet(LARCV_BUILDDIR,${UPS_PROD_DIR}/larcv/build)
    envSet(LARCV_COREDIR,${UPS_PROD_DIR}/larcv/larcv/core)
    envSet(LARCV_INCDIR,${UPS_PROD_DIR}/larcv/build/installed/include)
    envSet(LARCV_LIBDIR,${UPS_PROD_DIR}/larcv/build/installed/lib)
    envSet(LARCV_ANN,1)
    envSet(LARCV_LIBTORCH,1)
    envSet(LARCV_NUMPY,1)
    envSet(LARCV_OPENCV,1)
    envSet(LARCV_ROOT6,1)
    envSet(LARCV_VERSION,1)
    envSet(LARCV_PYTHON,3)

    # UBLArCVApp
    envSet(UBLARCVAPP_BASEDIR, ${UPS_PROD_DIR}/ublarcvapp)
    envSet(UBLARCVAPP_INCDIR,  ${UPS_PROD_DIR}/ublarcvapp/build/include)
    envSet(UBLARCVAPP_LIBDIR,  ${UPS_PROD_DIR}/ublarcvapp/build/lib)


    # larflow
    envSet(LARFLOW_BASEDIR, ${UPS_PROD_DIR}/larflow)
    envSet(LARFLOW_INCDIR,  ${UPS_PROD_DIR}/larflow/build/include)
    envSet(LARFLOW_LIBDIR,  ${UPS_PROD_DIR}/larflow/build/lib)

    # ublarcvserver
    envSet(UBLARCVSERVER_BASEDIR, ${UPS_PROD_DIR}/ublarcvserver )

    # Mask R-CNN
    envSet(UBMRCNN_DIR,${UBLARCVSERVER_BASEDIR}/networks/mask-rcnn.pytorch)

    # Infill network
    envSet(SPARSE_INFILL_DIR,${UBLARCVSERVER_BASEDIR}/networks/infill)

    if ( test `uname` = "Darwin" )
      envSet(LARCV_CXX,clang++)
      pathPrepend(DYLD_LIBRARY_PATH, ${LARCV_LIBDIR})
    else()
      envSet(LARCV_CXX,g++)
      pathPrepend(LD_LIBRARY_PATH, ${LARCV_LIBDIR})
    endif ( test `uname` = "Darwin" )

    # add python directory to the python path
    pathPrepend(PYTHONPATH, ${UPS_PROD_DIR}/larlite/python )
    pathPrepend(PYTHONPATH, ${UPS_PROD_DIR}/Geo2D/python )
    pathPrepend(PYTHONPATH, ${UPS_PROD_DIR}/LArOpenCV/python )
    pathPrepend(PYTHONPATH, ${UPS_PROD_DIR}/larcv/python )
    pathPrepend(PYTHONPATH, ${UPS_PROD_DIR}/ublarcvapp/python )
    pathPrepend(PYTHONPATH, ${UPS_PROD_DIR}/larflow/python )
    pathPrepend(PYTHONPATH, ${UPS_PROD_DIR}/ublarcvserver/python )
    pathPrepend(PYTHONPATH, ${UPS_PROD_DIR}/ublarcvserver/networks/mask-rcnn.pytorch )
    pathPrepend(PYTHONPATH, ${UPS_PROD_DIR}/ublarcvserver/networks/mask-rcnn.pytorch/lib )
    pathPrepend(PYTHONPATH, ${UPS_PROD_DIR}/ublarcvserver/app/ubmrcnn )
    pathPrepend(PYTHONPATH, ${UPS_PROD_DIR}/ublarcvserver/networks/infill )
    pathPrepend(PYTHONPATH, ${UPS_PROD_DIR}/ublarcvserver/networks/sparse_ssnet )

    # add lib dir to ld path
    pathPrepend(LD_LIBRARY_PATH, ${UPS_PROD_DIR}/larlite/build/installed/lib )
    pathPrepend(LD_LIBRARY_PATH, ${UPS_PROD_DIR}/Geo2D/lib )
    pathPrepend(LD_LIBRARY_PATH, ${UPS_PROD_DIR}/larcv/build/installed/lib )
    pathPrepend(LD_LIBRARY_PATH, ${UPS_PROD_DIR}/ublarcvapp/build/lib )
    pathPrepend(LD_LIBRARY_PATH, ${UPS_PROD_DIR}/larflow/build/lib )

    # add include dirst to root include path
<<<<<<< Updated upstream
    pathPrepend(ROOT_INCLUDE_PATH, ${UPS_PROD_DIR}/larlite/build/installed/include )
=======
    pathPrepend(ROOT_INCLUDE_PATH, ${UPS_PROD_DIR}/larlite/build/ )
    pathPrepend(ROOT_INCLUDE_PATH, ${UPS_PROD_DIR}/larlite/UserDev )
>>>>>>> Stashed changes
    pathPrepend(ROOT_INCLUDE_PATH, ${UPS_PROD_DIR}/Geo2D/ )
    pathPrepend(ROOT_INCLUDE_PATH, ${UPS_PROD_DIR}/LArOpenCV/ )
    pathPrepend(ROOT_INCLUDE_PATH, ${UPS_PROD_DIR}/larcv/build/installed/include )
    pathPrepend(ROOT_INCLUDE_PATH, ${UPS_PROD_DIR}/ublarcvapp/build/include )
    pathPrepend(ROOT_INCLUDE_PATH, ${UPS_PROD_DIR}/larflow/build/include )

End:
# End Group definition
#*************************************************
#
# ups declare command that works on gpvm:
# ups declare ubdl v2_me_06_03 -r ubdl/v2_me_06_03 -f Linux64bit+2.6-2.12 -m ubdl.table -q e17:prof -U ups/
#
#
